--- /home/maxrdlf95/kernel/drivers/cpufreq/cpufreq.c	2013-05-26 22:48:29.531878883 -0430
+++ /home/maxrdlf95/Escritorio/cpufreq.c	2013-05-26 22:45:15.575879198 -0430
@@ -75,7 +75,7 @@
 static DEFINE_PER_CPU(struct rw_semaphore, cpu_policy_rwsem);
 
 #define lock_policy_rwsem(mode, cpu)					\
-static int lock_policy_rwsem_##mode					\
+int lock_policy_rwsem_##mode					\
 (int cpu)								\
 {									\
 	int policy_cpu = per_cpu(cpufreq_policy_cpu, cpu);		\
@@ -93,14 +93,14 @@
 
 lock_policy_rwsem(write, cpu);
 
-static void unlock_policy_rwsem_read(int cpu)
+void unlock_policy_rwsem_read(int cpu)
 {
 	int policy_cpu = per_cpu(cpufreq_policy_cpu, cpu);
 	BUG_ON(policy_cpu == -1);
 	up_read(&per_cpu(cpu_policy_rwsem, policy_cpu));
 }
 
-static void unlock_policy_rwsem_write(int cpu)
+void unlock_policy_rwsem_write(int cpu)
 {
 	int policy_cpu = per_cpu(cpufreq_policy_cpu, cpu);
 	BUG_ON(policy_cpu == -1);
@@ -211,8 +211,7 @@
 		pr_debug("saving %lu as reference value for loops_per_jiffy; "
 			"freq is %u kHz\n", l_p_j_ref, l_p_j_ref_freq);
 	}
-	if ((val == CPUFREQ_PRECHANGE  && ci->old < ci->new) ||
-	    (val == CPUFREQ_POSTCHANGE && ci->old > ci->new) ||
+	if ((val == CPUFREQ_POSTCHANGE  && ci->old != ci->new) ||
 	    (val == CPUFREQ_RESUMECHANGE || val == CPUFREQ_SUSPENDCHANGE)) {
 		loops_per_jiffy = cpufreq_scale(l_p_j_ref, l_p_j_ref_freq,
 								ci->new);
@@ -644,7 +643,7 @@
 	struct clk *cpu_clk_g = tegra_get_clock_by_name("cpu_g");
 
 	/* find how many actual entries there are */
-	i = cpu_clk_g->dvfs->num_freqs;
+	i = cpu_clk_g->dvfs->num_freqs - 3;
 
 	for(i--; i >= 0; i--) {
 
@@ -658,7 +657,7 @@
 			pr_info("cpu g user mv tbl[%i]: %lu\n", i, volt_cur);
 
 			/* Non-standard sysfs interface: advance buf */
-			ret = sscanf(buf, "%15s", size_cur);
+			ret = sscanf(buf, "%s", size_cur);
 			buf += (strlen(size_cur)+1);
 		}
 	}
@@ -2027,9 +2026,9 @@
 	unsigned int pmax = policy->max;
 
 	qmin = min((unsigned int)pm_qos_request(PM_QOS_CPU_FREQ_MIN),
-		   data->user_policy.max);
+		   data->max);
 	qmax = max((unsigned int)pm_qos_request(PM_QOS_CPU_FREQ_MAX),
-		   data->user_policy.min);
+		   data->min);
 
 	pr_debug("setting new policy for CPU %u: %u - %u (%u - %u) kHz\n",
 		policy->cpu, pmin, pmax, qmin, qmax);
@@ -2041,8 +2040,7 @@
 	memcpy(&policy->cpuinfo, &data->cpuinfo,
 				sizeof(struct cpufreq_cpuinfo));
 
-	if (policy->min > data->user_policy.max ||
-	    policy->max < data->user_policy.min) {
+	if (policy->min > data->max || policy->max < data->min) {
 		ret = -EINVAL;
 		goto error_out;
 	}
@@ -2173,116 +2171,6 @@
 }
 EXPORT_SYMBOL(cpufreq_update_policy);
 
-/*
- *	cpufreq_set_gov - set governor for a cpu
- *	@cpu: CPU whose governor needs to be changed
- *	@target_gov: new governor to be set
- */
-int cpufreq_set_gov(char *target_gov, unsigned int cpu)
-{
-	int ret = 0;
-	struct cpufreq_policy new_policy;
-	struct cpufreq_policy *cur_policy;
-
-	if (target_gov == NULL)
-		return -EINVAL;
-
-	/* Get current governor */
-	cur_policy = cpufreq_cpu_get(cpu);
-	if (!cur_policy)
-		return -EINVAL;
-
-	if (lock_policy_rwsem_read(cur_policy->cpu) < 0) {
-		ret = -EINVAL;
-		goto err_out;
-	}
-
-	if (cur_policy->governor)
-		ret = strncmp(cur_policy->governor->name, target_gov,
-					strlen(target_gov));
-	else {
-		unlock_policy_rwsem_read(cur_policy->cpu);
-		ret = -EINVAL;
-		goto err_out;
-	}
-	unlock_policy_rwsem_read(cur_policy->cpu);
-
-	if (!ret) {
-		pr_debug(" Target governer & current governer is same\n");
-		ret = -EINVAL;
-		goto err_out;
-	} else {
-		new_policy = *cur_policy;
-		if (cpufreq_parse_governor(target_gov, &new_policy.policy,
-				&new_policy.governor)) {
-			ret = -EINVAL;
-			goto err_out;
-		}
-
-		if (lock_policy_rwsem_write(cur_policy->cpu) < 0) {
-			ret = -EINVAL;
-			goto err_out;
-		}
-
-		ret = __cpufreq_set_policy(cur_policy, &new_policy);
-
-		cur_policy->user_policy.policy = cur_policy->policy;
-		cur_policy->user_policy.governor = cur_policy->governor;
-
-		unlock_policy_rwsem_write(cur_policy->cpu);
-	}
-err_out:
-	cpufreq_cpu_put(cur_policy);
-	return ret;
-}
-EXPORT_SYMBOL(cpufreq_set_gov);
-
-/*
- *	cpufreq_current_gov - return current governor for the cpu
- *	@cpu: CPU whose governor needs to be changed
- *	@buf: buffer for current governor
- */
-ssize_t cpufreq_current_gov(char *buf, unsigned int cpu)
-{
-	int ret = 0;
-	struct cpufreq_policy *policy;
-
-	if (cpu >= nr_cpu_ids)
-		return -EINVAL;
-
-	/* Get current governor */
-	policy = cpufreq_cpu_get(cpu);
-	if (!policy)
-		return -EINVAL;
-
-	if (lock_policy_rwsem_read(policy->cpu) < 0) {
-		ret = -EINVAL;
-		goto err_out;
-	}
-
-	if (policy->policy == CPUFREQ_POLICY_POWERSAVE) {
-		ret = sprintf(buf, "powersave\n");
-	} else if (policy->policy == CPUFREQ_POLICY_PERFORMANCE) {
-		ret = sprintf(buf, "performance\n");
-	} else if (policy->governor) {
-		ret = scnprintf(buf, CPUFREQ_NAME_LEN, "%s",
-				policy->governor->name);
-	} else {
-		/* No gov set for this online cpu.
-		 * If we are here, require serious
-		 * debugging hence setting as pr_error.
-		 */
-		pr_err("No gov for online cpu:%d\n", cpu);
-		ret = -EINVAL;
-	}
-	unlock_policy_rwsem_read(policy->cpu);
-err_out:
-	cpufreq_cpu_put(policy);
-	return ret;
-
-}
-EXPORT_SYMBOL(cpufreq_current_gov);
-
 static int __cpuinit cpufreq_cpu_callback(struct notifier_block *nfb,
 					unsigned long action, void *hcpu)
 {
